{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","TableBody","props","rows","furnitureData","map","row","index","key","name","numberOf","onClick","changeFurniture","removeFurniture","Table","this","Component","Form","initialState","state","handleChange","event","target","value","setState","submitForm","addFurniture","htmlFor","type","id","onChange","App","furnitures","changeFurnitureFlag","alert","newFurnitures","filter","furniture","i","slice","newNumberOf","parseInt","prompt","isNaN","push","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f368d8a7.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>備品名</th>\n        <th>個数</th>\n        <th>個数を変更</th>\n        <th>備品一覧から削除</th>\n      </tr>\n    </thead>\n  )\n}\n\nconst TableBody = (props) => {\n  const rows = props.furnitureData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.numberOf}</td>\n        <td>\n          <button onClick={() => props.changeFurniture(index)}>変更</button>\n        </td>\n        <td>\n          <button onClick={() => props.removeFurniture(index)}>削除</button>\n        </td>\n      </tr>\n    )\n  })\n  \n  return (\n  <tbody>{rows}</tbody>\n  )\n}\n\nclass Table extends Component {\n  render() {\n    return (\n      <>\n        <h2>備品一覧</h2>\n        <table>\n          <TableHeader />\n          <TableBody\n            furnitureData={this.props.furnitureData}\n            changeFurniture={this.props.changeFurniture}\n            removeFurniture={this.props.removeFurniture} />\n        </table>\n      </>\n    )\n  }\n}\n\nexport default Table","import React, { Component } from 'react'\n\nclass Form extends Component {\n  initialState = {\n    name: '',\n    numberOf: 0,\n  }\n  state = this.initialState\n\n  handleChange = event => {\n    const {name, value} = event.target\n    this.setState({\n      [name]: value\n    })\n  }\n\n  submitForm = () => {\n    this.props.addFurniture(this.state)\n    this.setState(this.initialState)\n  }\n\n  render() {\n    const{ name, numberOf} = this.state\n    return(\n      <>\n        <h2>備品を追加</h2>\n        <form>\n          <label htmlFor=\"name\">備品名</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            value={name}\n            onChange={this.handleChange} />\n          <label htmlFor=\"job\">個数</label>\n          <input\n            type=\"number\"\n            name=\"numberOf\"\n            id=\"numberOf\"\n            value={numberOf}\n            onChange={this.handleChange} />\n          <input type=\"button\" value=\"追加\" onClick={this.submitForm} />\n        </form>\n      </>\n    )\n  }\n}\n\nexport default Form","import React, { Component } from 'react'\nimport Table from './Table'\nimport Form from './Form'\n\nclass App extends Component {\n  state = {\n    // 備品一覧\n    furnitures: [\n      {\n        name: 'LANケーブル',\n        numberOf: 30,\n      },\n      {\n        name: 'モニタ',\n        numberOf: 10,\n      },\n      {\n        name: 'HDMIケーブル',\n        numberOf: 15,\n      },\n      {\n        name: 'ノートPC',\n        numberOf: 5,\n      },\n    ],\n    // 備品の変更モード\n    changeFurnitureFlag: false\n  }\n  \n  changeFurniture = index => {\n    alert(index)\n    this.setState({\n      changeFurnitureFlag: true\n    })\n  }\n\n  // 備品の削除\n  removeFurniture = index => {\n    const newFurnitures = this.state.furnitures.filter((furniture, i) => {\n      return i !== index\n    })\n    this.setState({\n      furnitures: newFurnitures      \n    })\n  }\n\n  // 備品情報の変更\n  changeFurniture = (index) => {\n    let newFurnitures = this.state.furnitures.slice()\n    let newNumberOf = newFurnitures[index].numberOf;\n    newNumberOf = parseInt(prompt('個数を入力してください。', newFurnitures[index].numberOf))\n    if (isNaN(newNumberOf)) {\n      newNumberOf = newFurnitures[index].numberOf\n      alert('数字を入力してください！')\n    }\n    \n    newFurnitures[index].numberOf = newNumberOf\n    this.setState({\n      furnitures: newFurnitures\n    })\n  }\n\n  // 備品の追加\n  addFurniture = furniture => {\n    let newFurnitures = this.state.furnitures.slice()\n    newFurnitures.push(furniture)\n    this.setState({\n      furnitures: newFurnitures\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>備品管理Webアプリ</h1>\n        <p>備品数を管理するWebアプリです。</p>\n        <Table\n          furnitureData={this.state.furnitures}\n          changeFurniture={this.changeFurniture}\n          removeFurniture={this.removeFurniture} />\n        <Form \n          addFurniture={this.addFurniture} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}